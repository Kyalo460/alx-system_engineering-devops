So, what happens when you type https://google.com in your browser?

It might seem like a question with a straightforward answer, but there are intricacies and nuances involved that I will be discussing shortly. Your immediate answer might be, "Well, my browser requests for a webpage in the URL 'google.com' and is displayed on my browser if found." Although this is what takes place, other steps are involved before your browser gets access to the webpage. Bear with me as I discuss these steps.

Firstly, the URL provides information to the server you are trying to connect to. The segment 'https://' defines the protocol used for communication between the browser and the server. HTTPS (Hyper Text Transfer Protocol Secure) is a protocol that is a variant of the HTTP (Hyper Text Transfer Protocol) protocol used to interconnect with websites. However, this protocol is 'secure'. Data packets sent between the server and the browser are encrypted. Only the receiver can decrypt it. Data packets don't reach the receiver directly; they pass through different computers that are part of the network route. If the packets were not encrypted, the sensitive information would be visible to computers used in the network, which hackers could elploit.

The other piece of information passed is the domain name 'google.com' '.com' is a Domain Name Provider and is a server that contains all the 'A Records' of your domain. A Records are files that contain your domain name, 'google.com', mapped to an IP address ('8.8.8.8'). Domain names are used to access websites over the internet because humans are more likely to remember a Domain Name like 'google.com' than they are to remember an IP addresses like '127.255.8.1'. However, the browser does not know where the website 'google.com' is on the internet but it can easily locate where '127.255.8.1' is. Before a browser can connect to a website, it first needs to find out its IP address. It does this by requesting that from a DNS (Domain Name System) which can translate a valid URL (google.com) to an IP address (8.8.8.8). This is why we say that the TCP/IP protocol is the protocol used to interconnect computer devices on the internet. TCP stands for Transmission Control Protocol, and IP is an address like '127.255.8.1'. All computers connected to the internet have an IP address. IP addresses are used in TCP connections to connect and transfer data between computers over the internet.

So, your computer gets the IP address for the website and sends a GET request to the server at the respective IP address. If the protocol specified in the GET request was an HTTP protocol (http://google.com), the server would simply send back a RESPONSE containing the webpage HTML files, the stylesheets used (.css files) and the scripts used (.js javascript files) to the browser. The browser would then parse them (interpret them to the human view intended) and display them as a website. Typically, when a website loads up in your browser, the files it received in the RESPONSE were used to make the website. The webpage you are viewing is hosted locally on your browser, not on the server side. The server only gets involved when you send more requests for different web pages, or post new information to be stored on the site. This is generally what occurs in an HTTP connection.

There are some extra steps involved in a HTTPS connection. As I mentioned before, HTTPS connections are secure because the data sent is encrypted. The data packets are encrypted such that you need a certain key to decrypt the data. How does your browser manage to decrypt the data? This is where SSL certificates come in. An SSL certificate is a document stored in a server that is used in a HTTPS connection. The certificate contains a public key. "Public key!?", you might be asking right now. Well, there is a system that is used to encrypt data and make this data only decryptable to users that either contain the public or private keys. These keys come in pairs. You can run a simple command to generate Public-Private keys and keep the Private Key 'private' while freely sharing the public key. Users with the public keys will be able to decrypt messages encrypted with the private key and vice versa. Your browser gets the public key from the SSL certificate it receives from a server.

When your browser connects to a server using an HTTPS connection, it receives an SSL certificate from the server. After the client receives the SSL certificate, the browser encrypts a plain-text message like "Bacon and eggs" with its public key and sends it to the server. The server should then decrypt this message and send it back; confirming that it can decrypt messages from the browser. This routine is used to ensure that an HTTPS connection has been made between the client and server, and they can now start sharing data.

Depending on the GET request you issue to a server, it will choose to either use a web server or an application server. Web servers are used to send static websites. Static websites are websites that do not change according to a user's input. Such websites are used to display information that does not need to change according to the user input. Some examples are Articles, Home pages, Newsletters, and the News. Most websites nowadays handle dynamic content. This is content that changes depending on the user input. E-commerce sites, social media, and company websites are normally dynamic. Any website that asks for you to log in is most likely dynamic. These websites are served by the application server. This server doesn't just send then source-code files (.html, .css, .js) like a web server does, it generates websites depending on the user. So, instead of there being numerous HTML files on the server that are sent back to the user, there is some logic code that can generate a website on the fly and send it to a user. For example, let's say you log in to Instagram using a browser, your Instagram feed will not be the same as someone else's and the only way to achieve this is by making a user-unique webpage to display the content relevant to the specific user. An application server is responsible for that.

Other processes that an application server does include: accessing a database (eg MySQL) that might contain user information, and being able to read and write to that database. A database is a container that stores data. Without a database, a website/application server would not be able to remember different users and their preferences or content. Therefore, application servers are programmed and configured to handle read/write requests to a database. Coding languages like javascript, php, and python are used to perform some logic on the data and produce the desired result. You can then derive why it is called an application server because it contains applications (programs) that are used to serve the desired content to the user/client.

I'll keep using Instagram as an example. Try and estimate how many users make requests to the Instagram servers per minute. I would say a million is not that far from the actual number. If one server was responsible for handling all these requests then the response time would be high. Imagine trying to view your Instagram profile and it takes more than 5 minutes to load. Not ideal is it? This is why websites that expect a lot of traffic incorporate more than one server to serve the clients. This way, the workload is divided and distributed among the servers making the response rate increase exponentially. For your website to use multiple servers under one domain name, you need to integrate a load balancer into your system. A load balancer is a server that picks the server to handle a client's request. There are various algorithms used to pick the server to handle requests; one common algorithm is the round-robin algorithm. This algorithm allocates requests to the servers sequentially and consecutively, going round and round the list of servers. Having multiple servers not only reduces the workload, it also increases reliability. This is because if one server were to fail and stop working, the website would not go offline, and other servers could take over its workload seamlessly. Having one load balancer introduces an SPOF (Single Point Of Failure), meaning that if the load balancer was to fail then the whole system would fail. To counter this, you can have a back-up load balancer which becomes active when the main one fails.

A firewall can be incorporated in both the client-side (browser/user) and the server-side. It is responsible for blocking attempts made by malicious users/websites on your computer. Firewalls can inspect the data packets coming into your computer and match them in a database containing known malicious actors, and if a match is found, the data packets are discarded before they reach your computer. They can also act as a proxy that sits between the network and the computer. This ensures that the user is not directly connected to the internet. This is useful because hackers need a direct connection to your device for them to act. By monitoring where the packets are coming from, the port they are using, and the application they are intended for, firewalls can root out malicious attempts made on your device and stop them in their tracks. They prevent attacks that include: DOS (Denial Of Service) attacks which can make a server not able to handle requests from legitimate users, viruses that can corrupt the system, spam that contains links to malicious websites and so much more. Firewalls play an important role in securing your computer devices on the internet.

If you made it this far, I congratulate you! You now know the numerous steps that occur when you enter URLs in your browsers. There are more details on this topic which I chose not to add because this article would be too long to read. I encourage you to read more on DNS, Load balancers, and application servers. Goodbye.